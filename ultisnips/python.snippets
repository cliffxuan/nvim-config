snippet pd "Set PDB breakpoint" b
import pdb; pdb.set_trace()##########
endsnippet

snippet ip "Set iPDB breakpoint" b
import ipdb; ipdb.set_trace()##########
endsnippet

snippet ifm "if main" b
def main():
    pass


if __name__ == '__main__':
    main()
endsnippet

snippet sb "Shebang header for python scripts" b
#!/usr/bin/env python
# -*- coding: utf-8 -*-
$0
endsnippet

snippet lg "basic logging" b
format = '%(asctime)s - %(levelname)s - %(message)s'
logging.basicConfig(
    filename=logfile,
    level=logging.DEBUG,
    format=format)
endsnippet

snippet lg "logging to stream" b
format = '%(asctime)s - %(levelname)s - %(message)s'
ch = logging.StreamHandler()
ch.setFormatter(logging.Formatter(format))
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)
logger.addHandler(ch)
endsnippet

snippet lg "logging to stream and file" b
format = '%(asctime)s - %(levelname)s - %(message)s'
ch = logging.StreamHandler()
ch.setFormatter(logging.Formatter(format))
fh = logging.FileHandler('spam.log')
fh.setFormatter(logging.Formatter(format))
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)
logger.addHandler(ch)
logger.addHandler(fh)
endsnippet

snippet lg "logging to stream and file (dictConfig)" b
def get_logger():
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': True,
        'formatters': {
            'simple': {'format': '%(asctime)s - %(levelname)s - %(message)s'}
        },
        'handlers': {
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'simple'
            },
            'file': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': 'output.log',
                'formatter': 'simple'
            },
        },
        'loggers': {
            __name__: {
                'handlers': ['console', 'file'],
                'level': 'DEBUG'
            }
        }
    }
    logging.config.dictConfig(LOGGING)
    return logging.getLogger(__name__)

logger = get_logger()
endsnippet

snippet ap "argparse" b
import argparse

def argument_parser():
    parser = argparse.ArgumentParser(
        description='describe me')
    parser.add_argument(
        'filename', type=argparse.FileType('r'),
        help='name of the file to convert')
    parser.add_argument(
        '--source_format', '-sf', choices=['xml', 'json'],
        help='source format')
    parser.add_argument(
        'target_format', default='xml', nargs='?', choices=['xml', 'json'],
        help='target format')
    return parser


def main(argv=None):
    args = argument_parser().parse_args(argv)
endsnippet

snippet ko "kickoff a python script" b
#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
"""


def main():
    pass


if __name__ == '__main__':
    main()
endsnippet

snippet sac "sqlalchemy connection" !b
import sqlalchemy as sa
from sqlalchemy.orm import sessionmaker


def get_session():
    URI = 'mysql://root@localhost/db'
    sess = sessionmaker(
        bind=sa.create_engine(URI))()
    return sess

endsnippet

snippet cod "encoding for python scripts" b
# -*- coding: utf-8 -*-
$0
endsnippet

snippet conn "sqlalchemy connection" b
import sqlalchemy as sa
conn = sa.create_engine('mysql://user:password@localhost/db').connect()
endsnippet

snippet mindjango "sqlalchemy connection" b
# -*- coding: utf-8 -*-
"""
minimal django app. to run it:
python app.py runserver
"""

import sys

from django.conf import settings
from django.conf.urls import patterns
from django.http import HttpResponse
from django.core.management import execute_from_command_line

settings.configure(
    DEBUG=True,
    SECRET_KEY='placerandomsecretkeyhere',
    ROOT_URLCONF=sys.modules[__name__],
)


def index(request):
    return HttpResponse('Powered by Django')

urlpatterns = patterns('', (r'^$', index),)

if __name__ == "__main__":
    execute_from_command_line(sys.argv)
endsnippet


snippet multithreading "multi threading" b
import threading


def wait_to_run(func, event, sec, *arg, **kw):
    event.wait(sec)
    func(*arg)


def multi_threading(target, concurrency, *args):
    events = [threading.Event() for i in xrange(concurrency)]
    threads = [threading.Thread(target=wait_to_run,
                                args=(target, evt, 2) + args)
               for evt in events]
    for t in threads:
        t.start()
    for e in events:
        e.set()
    for t in threads:
        t.join()
endsnippet


snippet forkthreading "fork and multithreading" b
import os


def wait_to_run(func, event, sec, *arg, **kw):
    event.wait(sec)
    func(*arg)


def multi_threading(target, concurrency, *args):
    events = [threading.Event() for i in xrange(concurrency)]
    threads = [threading.Thread(target=wait_to_run,
                                args=(target, evt, 2) + args)
               for evt in events]
    for t in threads:
        t.start()
    for e in events:
        e.set()
    for t in threads:
        t.join()


def fork_and_multi_threading(target, concurrency, *args):
    pid = os.fork()
    if pid == 0:
        multi_threading(target, concurrency, *args)
        os._exit(0)
    return pid
endsnippet


snippet rand "random string" b
import random
import string


def rand_string(n):
    options = string.ascii_uppercase + string.digits
    return ''.join(random.choice(options) for _ in range(n))
endsnippet


snippet paramz "pytest.mark.parametrize" b
import pytest
@pytest.mark.parametrize("input,expected", [
    ("3+5", 8),
    ("6*9", 42),
])
def test_eval(input, expected):
    assert eval(input) == expected
endsnippet


snippet torpr "tornado print" b
def prepare(self):
    print '!' * 20
    print self.request.headers
    print self.request.body
    print '!' * 20


def write(self, chunk):
    print '*' * 20
    print chunk
    print '*' * 20
    return super(BaseHandler, self).write(chunk)


BaseHandler.prepare = prepare.__get__(None, BaseHandler)
BaseHandler.write = write.__get__(None, BaseHandler)
endsnippet


snippet setup "setup.py" b
try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup


VERSION = '0.0.1'

setup(name='foo',
      version=VERSION,
      description='Package Description',
      author='Cliff Xuan',
      packages=['foo'],
      install_requires=[])
endsnippet


snippet pwd "current working directory" b
import os

PWD = os.path.abspath(os.path.dirname(__file__))
endsnippet

snippet tor "tornado server stub"
# -*- coding: utf-8 -*-
import tornado.ioloop
import tornado.web


class MainHandler(tornado.web.RequestHandler):
    def get(self):
        self.write("Hello, world")


def make_app():
    return tornado.web.Application([
        (r"/", MainHandler),
    ])

if __name__ == "__main__":
    app = make_app()
    app.listen(8888)
    tornado.ioloop.IOLoop.current().start()
endsnippet


snippet osp "os.path.join"
os.path.join()
endsnippet


snippet djcmd "django command script"
#!/usr/bin/env python
# -*- coding: utf-8 -*-

from django.core.management.base import BaseCommand


class Command(BaseCommand):

    def add_arguments(self, parser):
        parser.add_argument(
            '-n', '--name', default='foo', help='name')

    def handle(self, *args, **options):
        print('command')
endsnippet
